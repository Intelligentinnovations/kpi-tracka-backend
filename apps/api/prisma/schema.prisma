generator client {
  provider = "prisma-kysely"
  output   = "../src/utils/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String  @unique
  firstName String?
  lastName  String?

  company CompanyMember[]

  // settings
  settingMentionInMessage NotificationType[] @default([PUSH, IN_APP])
  settingReplyInMessage   NotificationType[] @default([PUSH, IN_APP])
  settingTaskUpdated      NotificationType[] @default([PUSH, IN_APP])
  settingReminder         NotificationType[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model Company {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String          @unique
  email       String          @unique
  phone       String
  companySize Int
  logo        String?
  country     String
  bio         String?
  companyType CompanyType     @default(INDIVIDUAL)
  teams       Team[]
  members     CompanyMember[]
  invites     Invite[]

  @@map("companies")
}

model CompanyMember {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User                @relation(fields: [userId], references: [id])
  userId     String              @db.Uuid
  company    Company             @relation(fields: [companyId], references: [id])
  companyId  String              @db.Uuid
  memberRole CompanyRole         @default(INDIVIDUAL)
  tasks      CompanyMemberTask[]
  teams      TeamMember[]
  invites    Invite[]

  @@unique([userId, companyId])
  @@map("company_members")
}

model Team {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  company   Company      @relation(fields: [companyId], references: [id])
  companyId String       @db.Uuid
  projects  Project[]
  members   TeamMember[]

  @@map("teams")
}

model TeamMember {
  team            Team          @relation(fields: [teamId], references: [id])
  teamId          String        @db.Uuid
  companyMember   CompanyMember @relation(fields: [companyMemberId], references: [id])
  companyMemberId String        @db.Uuid

  @@id([teamId, companyMemberId])
  @@map("team_members")
}

model CompanyMemberTask {
  member   CompanyMember @relation(fields: [memberId], references: [id])
  memberId String        @db.Uuid
  task     Task          @relation(fields: [taskId], references: [id])
  taskId   String        @db.Uuid

  @@id([taskId, memberId])
  @@map("company_member_tasks")
}

model Task {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignees CompanyMemberTask[]
  project   Project             @relation(fields: [projectId], references: [id])
  projectId String              @db.Uuid
  status    TaskStatus          @default(TODO)

  @@map("tasks")
}

model Project {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  startDate   DateTime
  endDate     DateTime

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String @db.Uuid

  task   Task[]
  status ProjectStatus @default(TODO)

  @@map("projects")
}

model Invite {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamAdmin   CompanyMember @relation(fields: [teamAdminId], references: [id])
  teamAdminId String        @db.Uuid
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   String        @db.Uuid
  inviteEmail String
  inviteRole  CompanyRole   @default(TEAM_MEMBER)

  @@map("team_invites")
}

enum CompanyType {
  INDIVIDUAL
  TEAM
}

enum CompanyRole {
  INDIVIDUAL
  TEAM_MEMBER
  TEAM_LEADER
  ADMIN
}

enum NotificationType {
  PUSH
  EMAIL
  IN_APP
}

enum ProjectStatus {
  TODO
  ONGOING
  PENDING
  COMPLETED
  OVERDUE
  CANCELLED
}

enum TaskStatus {
  TODO
  PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}
